{"remainingRequest":"/home/pena/python/mini-proj2/node_modules/babel-loader/lib/index.js!/home/pena/python/mini-proj2/node_modules/eslint-loader/index.js??ref--13-0!/home/pena/python/mini-proj2/src/api/question.service.js","dependencies":[{"path":"/home/pena/python/mini-proj2/src/api/question.service.js","mtime":1618989262000},{"path":"/home/pena/python/mini-proj2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pena/python/mini-proj2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/pena/python/mini-proj2/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3BlbmEvcHl0aG9uL21pbmktcHJvajIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgQVBJX1VSTCBmcm9tICcuL2NvbmZpZy5qcyc7CmV4cG9ydCB2YXIgcXVlc3Rpb25TZXJ2aWNlID0gewogIGdldFF1ZXN0aW9uczogZnVuY3Rpb24gZ2V0UXVlc3Rpb25zKHRva2VuKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gZmV0Y2goIiIuY29uY2F0KEFQSV9VUkwsICIvcXVlc3Rpb25zIiksIHsKICAgICAgICAgICAgICAgIG1ldGhvZDogIkdFVCIsCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogdG9rZW4KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0LnNlbnQpOwoKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIHRocm93IEVycm9yKGhhbmRsZVJlc3BvbnNlcyhyZXNwb25zZS5zdGF0dXMpKTsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKCk7CiAgfSwKICBhZGRRdWVzdGlvbjogZnVuY3Rpb24gYWRkUXVlc3Rpb24odG9rZW4sIHBheWxvYWQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICB2YXIgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBmZXRjaCgiIi5jb25jYXQoQVBJX1VSTCwgIi9xdWVzdGlvbnMiKSwgewogICAgICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogdG9rZW4KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA2OwogICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0Mi5zZW50KTsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICB0aHJvdyBFcnJvcihoYW5kbGVSZXNwb25zZXMocmVzcG9uc2Uuc3RhdHVzKSk7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIpOwogICAgfSkpKCk7CiAgfSwKICBlZGl0UXVlc3Rpb246IGZ1bmN0aW9uIGVkaXRRdWVzdGlvbih0b2tlbiwgcGF5bG9hZCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoKSB7CiAgICAgIHZhciByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKCIiLmNvbmNhdChBUElfVVJMLCAiL3F1ZXN0aW9ucy8iKS5jb25jYXQocGF5bG9hZC5faWQpLCB7CiAgICAgICAgICAgICAgICBtZXRob2Q6ICJQVVQiLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IHRva2VuCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0My5zZW50OwoKICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNjsKICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpOwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDMuc2VudCk7CgogICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoaGFuZGxlUmVzcG9uc2VzKHJlc3BvbnNlLnN0YXR1cykpOwoKICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzKTsKICAgIH0pKSgpOwogIH0sCiAgcmVtb3ZlUXVlc3Rpb246IGZ1bmN0aW9uIHJlbW92ZVF1ZXN0aW9uKHRva2VuLCBpZCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgIHZhciByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDQucHJldiA9IF9jb250ZXh0NC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKCIiLmNvbmNhdChBUElfVVJMLCAiL3F1ZXN0aW9ucy8iKS5jb25jYXQoaWQpLCB7CiAgICAgICAgICAgICAgICBtZXRob2Q6ICJERUxFVEUiLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLAogICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IHRva2VuCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDQuc2VudDsKCiAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykgewogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA5OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDY7CiAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ0LmFicnVwdCgicmV0dXJuIiwgX2NvbnRleHQ0LnNlbnQpOwoKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIHRocm93IEVycm9yKGhhbmRsZVJlc3BvbnNlcyhyZXNwb25zZS5zdGF0dXMpKTsKCiAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlNCk7CiAgICB9KSkoKTsKICB9Cn07CgpmdW5jdGlvbiBoYW5kbGVSZXNwb25zZXMoY29kZSkgewogIHZhciBtZXNzYWdlID0gIiI7CgogIHN3aXRjaCAoY29kZSkgewogICAgY2FzZSA0MDE6CiAgICAgIG1lc3NhZ2UgPSAiTsOjbyBlc3TDoSBhdXRvcml6YWRvIGEgZXhlY3V0YXIgZXN0YSBhw6fDo28hIjsKICAgICAgYnJlYWs7CgogICAgY2FzZSA0MDk6CiAgICAgIG1lc3NhZ2UgPSAiSsOhIGV4aXN0ZSB1bSB1dGlsaXphZG9yIGNvbSBlc3RlIHVzZXJuYW1lISI7CiAgICAgIGJyZWFrOwoKICAgIGRlZmF1bHQ6CiAgICAgIG1lc3NhZ2UgPSAiTWVuc2FnZW0gZGVzY29uaGVjaWRhIjsKICAgICAgYnJlYWs7CiAgfQoKICByZXR1cm4gbWVzc2FnZTsKfQoKZXhwb3J0IGRlZmF1bHQgcXVlc3Rpb25TZXJ2aWNlOw=="},{"version":3,"sources":["/home/pena/python/mini-proj2/src/api/question.service.js"],"names":["API_URL","questionService","getQuestions","token","fetch","method","headers","response","ok","json","Error","handleResponses","status","addQuestion","payload","body","JSON","stringify","editQuestion","_id","removeQuestion","id","code","message"],"mappings":"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","sourcesContent":["import API_URL from './config.js'\n\nexport const questionService = {\n  async getQuestions(token) {\n    const response = await fetch(`${API_URL}/questions`, {\n      method: \"GET\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      }\n    });\n    if (response.ok) {\n      return await response.json();\n    } else {\n      throw Error(handleResponses(response.status));\n    }\n  },\n  async addQuestion(token, payload) {\n    const response = await fetch(`${API_URL}/questions`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      },\n      body: JSON.stringify(payload)\n    })\n    if (response.ok) {\n      return await response.json();\n    } else {\n      throw Error(handleResponses(response.status));\n    }\n  },\n  async editQuestion(token, payload) {\n    const response = await fetch(`${API_URL}/questions/${payload._id}`, {\n      method: \"PUT\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      },\n      body: JSON.stringify(payload)\n    });\n    if (response.ok) {\n      return await response.json();\n    } else {\n      throw Error(handleResponses(response.status));\n    }\n  },\n  async removeQuestion(token, id) {\n    const response = await fetch(`${API_URL}/questions/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token\n      }\n    });\n    if (response.ok) {\n      return await response.json();\n    } else {\n      throw Error(handleResponses(response.status));\n    }\n  }\n};\n\nfunction handleResponses(code) {\n  let message = \"\"\n  switch (code) {\n    case 401:\n      message = \"Não está autorizado a executar esta ação!\"\n      break;\n    case 409:\n      message = \"Já existe um utilizador com este username!\"\n      break;\n    default:\n      message = \"Mensagem desconhecida\"\n      break;\n  }\n  return message\n}\n\nexport default questionService;\n"]}]}