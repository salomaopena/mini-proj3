{"remainingRequest":"/home/pena/python/mini-proj2/node_modules/babel-loader/lib/index.js!/home/pena/python/mini-proj2/node_modules/eslint-loader/index.js??ref--13-0!/home/pena/python/mini-proj2/src/api/auth.service.js","dependencies":[{"path":"/home/pena/python/mini-proj2/src/api/auth.service.js","mtime":1618989262000},{"path":"/home/pena/python/mini-proj2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pena/python/mini-proj2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/pena/python/mini-proj2/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL3BlbmEvcHl0aG9uL21pbmktcHJvajIvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgQVBJX1VSTCBmcm9tICIuL2NvbmZpZy5qcyI7CmV4cG9ydCB2YXIgYXV0aFNlcnZpY2UgPSB7CiAgbG9naW46IGZ1bmN0aW9uIGxvZ2luKHBheWxvYWQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciByZXNwb25zZSwgZGF0YSwgdG9rZW4sIHByb2ZpbGU7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gZmV0Y2goIiIuY29uY2F0KEFQSV9VUkwsICIvYXV0aCIpLCB7CiAgICAgICAgICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CgogICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7CiAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBkYXRhID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICB0b2tlbiA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCJBdXRob3JpemF0aW9uIik7CiAgICAgICAgICAgICAgcHJvZmlsZSA9IGRhdGEuYm9keTsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICB0b2tlbjogdG9rZW4sCiAgICAgICAgICAgICAgICBwcm9maWxlOiBwcm9maWxlCiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICAgIHRocm93IEVycm9yKGhhbmRsZVJlc3BvbnNlcyhyZXNwb25zZS5zdGF0dXMpKTsKCiAgICAgICAgICAgIGNhc2UgMTM6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKCk7CiAgfSwKCiAgLyoqCiAgICogUmVnaXN0ZXJzIGEgbmV3IHVzZXIKICAgKiBAcGFyYW0ge2FzZCBhZHN9IHBheWxvYWQKICAgKi8KICByZWdpc3RlcjogZnVuY3Rpb24gcmVnaXN0ZXIocGF5bG9hZCkgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgIHZhciByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIGZldGNoKCIiLmNvbmNhdChBUElfVVJMLCAiL3VzZXJzIiksIHsKICAgICAgICAgICAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CgogICAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gOTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA2OwogICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0Mi5zZW50KTsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICB0aHJvdyBFcnJvcihoYW5kbGVSZXNwb25zZXMocmVzcG9uc2Uuc3RhdHVzKSk7CgogICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIpOwogICAgfSkpKCk7CiAgfSwKICBnZXRJbmZvOiBmdW5jdGlvbiBnZXRJbmZvKHRva2VuKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMygpIHsKICAgICAgdmFyIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gZmV0Y2goIiIuY29uY2F0KEFQSV9VUkwsICIvYXV0aCIpLCB7CiAgICAgICAgICAgICAgICBtZXRob2Q6ICJHRVQiLAogICAgICAgICAgICAgICAgaGVhZGVyczogewogICAgICAgICAgICAgICAgICAiQ29udGVudC1UeXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICAgICAgICAgICAgICAgICBBdXRob3JpemF0aW9uOiB0b2tlbgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSA1OwogICAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5qc29uKCk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIF9jb250ZXh0My5zZW50KTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzKTsKICAgIH0pKSgpOwogIH0KfTsKCmZ1bmN0aW9uIGhhbmRsZVJlc3BvbnNlcyhjb2RlKSB7CiAgdmFyIG1lc3NhZ2UgPSAiIjsKCiAgc3dpdGNoIChjb2RlKSB7CiAgICBjYXNlIDQwMToKICAgICAgbWVzc2FnZSA9ICJOw6NvIGVzdMOhIGF1dG9yaXphZG8gYSBleGVjdXRhciBlc3RhIGHDp8OjbyEiOwogICAgICBicmVhazsKCiAgICBjYXNlIDQwMzoKICAgICAgbWVzc2FnZSA9ICJEYWRvcyBkYXMgY3JlZGVuY2lhaXMgZXJyYWRvcyEiOwogICAgICBicmVhazsKCiAgICBjYXNlIDQwNjoKICAgICAgbWVzc2FnZSA9ICJEYWRvcyBkbyB1dGlsaXphZG9yIGrDoSBleGlzdGVudGVzISI7CiAgICAgIGJyZWFrOwoKICAgIGRlZmF1bHQ6CiAgICAgIG1lc3NhZ2UgPSAiTWVuc2FnZW0gZGVzY29uaGVjaWRhIjsKICAgICAgYnJlYWs7CiAgfQoKICByZXR1cm4gbWVzc2FnZTsKfQoKZXhwb3J0IGRlZmF1bHQgYXV0aFNlcnZpY2U7"},{"version":3,"sources":["/home/pena/python/mini-proj2/src/api/auth.service.js"],"names":["API_URL","authService","login","payload","fetch","method","headers","body","JSON","stringify","response","ok","json","data","token","get","profile","Error","handleResponses","status","register","getInfo","Authorization","code","message"],"mappings":";;;AAAA,OAAOA,OAAP,MAAoB,aAApB;AAEA,OAAO,IAAMC,WAAW,GAAG;AACnBC,EAAAA,KADmB,iBACbC,OADa,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACIC,KAAK,WAAIJ,OAAJ,YAAoB;AAC9CK,gBAAAA,MAAM,EAAE,MADsC;AAE9CC,gBAAAA,OAAO,EAAE;AACP,kCAAgB;AADT,iBAFqC;AAK9CC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAf;AALwC,eAApB,CADT;;AAAA;AACbO,cAAAA,QADa;;AAAA,mBAQfA,QAAQ,CAACC,EARM;AAAA;AAAA;AAAA;;AAAA;AAAA,qBASED,QAAQ,CAACE,IAAT,EATF;;AAAA;AASXC,cAAAA,IATW;AAUXC,cAAAA,KAVW,GAUHJ,QAAQ,CAACJ,OAAT,CAAiBS,GAAjB,CAAqB,eAArB,CAVG;AAWXC,cAAAA,OAXW,GAWDH,IAAI,CAACN,IAXJ;AAAA,+CAYV;AAAEO,gBAAAA,KAAK,EAALA,KAAF;AAASE,gBAAAA,OAAO,EAAPA;AAAT,eAZU;;AAAA;AAAA,oBAcXC,KAAK,CAACC,eAAe,CAACR,QAAQ,CAACS,MAAV,CAAhB,CAdM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBpB,GAjBwB;;AAkBzB;AACF;AACA;AACA;AACQC,EAAAA,QAtBmB,oBAsBVjB,OAtBU,EAsBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACCC,KAAK,WAAIJ,OAAJ,aAAqB;AAC/CK,gBAAAA,MAAM,EAAE,MADuC;AAE/CC,gBAAAA,OAAO,EAAE;AACP,kCAAgB;AADT,iBAFsC;AAK/CC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAf;AALyC,eAArB,CADN;;AAAA;AAChBO,cAAAA,QADgB;;AAAA,mBAQlBA,QAAQ,CAACC,EARS;AAAA;AAAA;AAAA;;AAAA;AAAA,qBASPD,QAAQ,CAACE,IAAT,EATO;;AAAA;AAAA;;AAAA;AAAA,oBAWdK,KAAK,CAACC,eAAe,CAACR,QAAQ,CAACS,MAAV,CAAhB,CAXS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAavB,GAnCwB;AAoCnBE,EAAAA,OApCmB,mBAoCXP,KApCW,EAoCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACIV,KAAK,WAAIJ,OAAJ,YAAoB;AAC9CK,gBAAAA,MAAM,EAAE,KADsC;AAE9CC,gBAAAA,OAAO,EAAE;AACP,kCAAgB,kBADT;AAEPgB,kBAAAA,aAAa,EAAER;AAFR;AAFqC,eAApB,CADT;;AAAA;AACbJ,cAAAA,QADa;AAAA;AAAA,qBAQNA,QAAQ,CAACE,IAAT,EARM;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASpB;AA7CwB,CAApB;;AAgDP,SAASM,eAAT,CAAyBK,IAAzB,EAA+B;AAC7B,MAAIC,OAAO,GAAG,EAAd;;AACA,UAAQD,IAAR;AACE,SAAK,GAAL;AACEC,MAAAA,OAAO,GAAG,2CAAV;AACA;;AACF,SAAK,GAAL;AACEA,MAAAA,OAAO,GAAG,gCAAV;AACA;;AACF,SAAK,GAAL;AACEA,MAAAA,OAAO,GAAG,oCAAV;AACA;;AACF;AACEA,MAAAA,OAAO,GAAG,uBAAV;AACA;AAZJ;;AAcA,SAAOA,OAAP;AACD;;AAED,eAAevB,WAAf","sourcesContent":["import API_URL from \"./config.js\";\n\nexport const authService = {\n  async login(payload) {\n    const response = await fetch(`${API_URL}/auth`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\"\n      },\n      body: JSON.stringify(payload)\n    });\n    if (response.ok) {\n      const data = await response.json();\n      const token = response.headers.get(\"Authorization\");\n      const profile = data.body;\n      return { token, profile };\n    } else {\n      throw Error(handleResponses(response.status));\n    }\n  },\n  /**\n   * Registers a new user\n   * @param {asd ads} payload\n   */\n  async register(payload) {\n    const response = await fetch(`${API_URL}/users`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\"\n      },\n      body: JSON.stringify(payload)\n    });\n    if (response.ok) {\n      return await response.json();\n    } else {\n      throw Error(handleResponses(response.status));\n    }\n  },\n  async getInfo(token) {\n    const response = await fetch(`${API_URL}/auth`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: token\n      }\n    });\n    return await response.json();\n  }\n};\n\nfunction handleResponses(code) {\n  let message = \"\";\n  switch (code) {\n    case 401:\n      message = \"Não está autorizado a executar esta ação!\";\n      break;\n    case 403:\n      message = \"Dados das credenciais errados!\";\n      break;\n    case 406:\n      message = \"Dados do utilizador já existentes!\";\n      break;\n    default:\n      message = \"Mensagem desconhecida\";\n      break;\n  }\n  return message;\n}\n\nexport default authService;\n"]}]}