{"remainingRequest":"/home/pena/python/mini-proj2/node_modules/babel-loader/lib/index.js!/home/pena/python/mini-proj2/node_modules/eslint-loader/index.js??ref--13-0!/home/pena/python/mini-proj2/src/store/questions/question.module.js","dependencies":[{"path":"/home/pena/python/mini-proj2/src/store/questions/question.module.js","mtime":1618989262000},{"path":"/home/pena/python/mini-proj2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/pena/python/mini-proj2/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/home/pena/python/mini-proj2/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvaG9tZS9wZW5hL3B5dGhvbi9taW5pLXByb2oyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICIvaG9tZS9wZW5hL3B5dGhvbi9taW5pLXByb2oyL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKCnZhciBfYWN0aW9ucywgX211dGF0aW9uczsKCmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgcXVlc3Rpb25TZXJ2aWNlIGZyb20gIkAvYXBpL3F1ZXN0aW9uLnNlcnZpY2UiOwppbXBvcnQgeyAvLyBBY3Rpb25zCkZFVENIX1FVRVNUSU9OUywgQUREX1FVRVNUSU9OLCBFRElUX1FVRVNUSU9OLCBSRU1PVkVfUVVFU1RJT04gLy8gTXV0YXRpb25zIAosIFNFVF9RVUVTVElPTlMsIFNFVF9NRVNTQUdFIH0gZnJvbSAiLi9xdWVzdGlvbi5jb25zdGFudHMiOwp2YXIgc3RhdGUgPSB7CiAgcXVlc3Rpb25zOiBbXSwKICBtZXNzYWdlOiAiIgp9Owp2YXIgZ2V0dGVycyA9IHsKICBnZXRRdWVzdGlvbnM6IGZ1bmN0aW9uIGdldFF1ZXN0aW9ucyhzdGF0ZSkgewogICAgcmV0dXJuIHN0YXRlLnF1ZXN0aW9uczsKICB9LAogIGdldFF1ZXN0aW9uQnlJZDogZnVuY3Rpb24gZ2V0UXVlc3Rpb25CeUlkKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGlkKSB7CiAgICAgIHJldHVybiBzdGF0ZS5xdWVzdGlvbnMuZmluZChmdW5jdGlvbiAocXVlc3Rpb24pIHsKICAgICAgICByZXR1cm4gcXVlc3Rpb24uX2lkID09PSBpZDsKICAgICAgfSk7CiAgICB9OwogIH0sCiAgZ2V0UXVlc3Rpb25zQnlMZXZlbDogZnVuY3Rpb24gZ2V0UXVlc3Rpb25zQnlMZXZlbChzdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChsZXZlbCkgewogICAgICByZXR1cm4gc3RhdGUucXVlc3Rpb25zLmZpbHRlcihmdW5jdGlvbiAocXVlc3Rpb24pIHsKICAgICAgICByZXR1cm4gcXVlc3Rpb24ubGV2ZWwgPT09IGxldmVsOwogICAgICB9KTsKICAgIH07CiAgfSwKICBnZXRNZXNzYWdlOiBmdW5jdGlvbiBnZXRNZXNzYWdlKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUubWVzc2FnZTsKICB9Cn07CnZhciBhY3Rpb25zID0gKF9hY3Rpb25zID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfYWN0aW9ucywgRkVUQ0hfUVVFU1RJT05TLCBmdW5jdGlvbiAoKSB7CiAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKF9yZWYpIHsKICAgIHZhciBjb21taXQsIHJvb3RTdGF0ZTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgY29tbWl0ID0gX3JlZi5jb21taXQsIHJvb3RTdGF0ZSA9IF9yZWYucm9vdFN0YXRlOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgICAgcXVlc3Rpb25TZXJ2aWNlLmdldFF1ZXN0aW9ucyhyb290U3RhdGUuYXV0aC50b2tlbikudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICAgICAgICBjb21taXQoU0VUX1FVRVNUSU9OUywgcmVzLmJvZHkpOwogICAgICAgICAgICAgICAgcmVzb2x2ZShyZXMpOwogICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICAgICAgICAgIGNvbW1pdChTRVRfTUVTU0FHRSwgZXJyLm1lc3NhZ2UpOwogICAgICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgX2NhbGxlZSk7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gKF94KSB7CiAgICByZXR1cm4gX3JlZjIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9Owp9KCkpLCBfZGVmaW5lUHJvcGVydHkoX2FjdGlvbnMsIEFERF9RVUVTVElPTiwgZnVuY3Rpb24gKF9yZWYzLCBwYXlsb2FkKSB7CiAgdmFyIGNvbW1pdCA9IF9yZWYzLmNvbW1pdCwKICAgICAgcm9vdFN0YXRlID0gX3JlZjMucm9vdFN0YXRlOwogIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICBxdWVzdGlvblNlcnZpY2UuYWRkUXVlc3Rpb24ocm9vdFN0YXRlLmF1dGgudG9rZW4sIHBheWxvYWQpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICBjb21taXQoU0VUX01FU1NBR0UsICJzdWNlc3NvISIpOwogICAgICByZXNvbHZlKHJlcy5ib2R5KTsKICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsKICAgICAgY29tbWl0KFNFVF9NRVNTQUdFLCBlcnIubWVzc2FnZSk7CiAgICAgIHJlamVjdChlcnIpOwogICAgfSk7CiAgfSk7Cn0pLCBfZGVmaW5lUHJvcGVydHkoX2FjdGlvbnMsIEVESVRfUVVFU1RJT04sIGZ1bmN0aW9uIChfcmVmNCwgcGF5bG9hZCkgewogIHZhciByb290U3RhdGUgPSBfcmVmNC5yb290U3RhdGU7CiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIHF1ZXN0aW9uU2VydmljZS5lZGl0UXVlc3Rpb24ocm9vdFN0YXRlLmF1dGgudG9rZW4sIHBheWxvYWQpLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICByZXR1cm4gcmVzb2x2ZShyZXMpOwogICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICByZXR1cm4gcmVqZWN0KGVycik7CiAgICB9KTsKICB9KTsKfSksIF9kZWZpbmVQcm9wZXJ0eShfYWN0aW9ucywgUkVNT1ZFX1FVRVNUSU9OLCBmdW5jdGlvbiAoX3JlZjUsIGlkKSB7CiAgdmFyIGNvbW1pdCA9IF9yZWY1LmNvbW1pdCwKICAgICAgcm9vdFN0YXRlID0gX3JlZjUucm9vdFN0YXRlOwogIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICBxdWVzdGlvblNlcnZpY2UucmVtb3ZlUXVlc3Rpb24ocm9vdFN0YXRlLmF1dGgudG9rZW4sIGlkKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgY29tbWl0KFNFVF9NRVNTQUdFLCAic3VjZXNzbyEiKTsKICAgICAgcmVzb2x2ZShyZXMpOwogICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICByZXR1cm4gcmVqZWN0KGVycik7CiAgICB9KTsKICB9KTsKfSksIF9hY3Rpb25zKTsKZXhwb3J0IHZhciBtdXRhdGlvbnMgPSAoX211dGF0aW9ucyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX211dGF0aW9ucywgU0VUX1FVRVNUSU9OUywgZnVuY3Rpb24gKHN0YXRlLCBxdWVzdGlvbnMpIHsKICBzdGF0ZS5xdWVzdGlvbnMgPSBxdWVzdGlvbnM7Cn0pLCBfZGVmaW5lUHJvcGVydHkoX211dGF0aW9ucywgU0VUX01FU1NBR0UsIGZ1bmN0aW9uIChzdGF0ZSwgbWVzc2FnZSkgewogIHN0YXRlLm1lc3NhZ2UgPSBtZXNzYWdlOwp9KSwgX211dGF0aW9ucyk7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lc3BhY2VkOiB0cnVlLAogIHN0YXRlOiBzdGF0ZSwKICBnZXR0ZXJzOiBnZXR0ZXJzLAogIGFjdGlvbnM6IGFjdGlvbnMsCiAgbXV0YXRpb25zOiBtdXRhdGlvbnMKfTs="},{"version":3,"sources":["/home/pena/python/mini-proj2/src/store/questions/question.module.js"],"names":["questionService","FETCH_QUESTIONS","ADD_QUESTION","EDIT_QUESTION","REMOVE_QUESTION","SET_QUESTIONS","SET_MESSAGE","state","questions","message","getters","getQuestions","getQuestionById","id","find","question","_id","getQuestionsByLevel","level","filter","getMessage","actions","commit","rootState","Promise","resolve","reject","auth","token","then","res","body","err","payload","addQuestion","editQuestion","removeQuestion","mutations","namespaced"],"mappings":";;;;;;;;;AAAA,OAAOA,eAAP,MAA4B,wBAA5B;AACA,SACE;AACAC,eAFF,EAGEC,YAHF,EAIEC,aAJF,EAKEC,eALF,CAME;AANF,EAOEC,aAPF,EAQEC,WARF,QASO,sBATP;AAWA,IAAMC,KAAK,GAAG;AACZC,EAAAA,SAAS,EAAE,EADC;AAEZC,EAAAA,OAAO,EAAE;AAFG,CAAd;AAKA,IAAMC,OAAO,GAAG;AACdC,EAAAA,YAAY,EAAE,sBAAAJ,KAAK;AAAA,WAAIA,KAAK,CAACC,SAAV;AAAA,GADL;AAEdI,EAAAA,eAAe,EAAE,yBAAAL,KAAK;AAAA,WAAI,UAAAM,EAAE,EAAI;AAC9B,aAAON,KAAK,CAACC,SAAN,CAAgBM,IAAhB,CAAqB,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,GAAT,KAAiBH,EAArB;AAAA,OAA7B,CAAP;AACD,KAFqB;AAAA,GAFR;AAKdI,EAAAA,mBAAmB,EAAE,6BAAAV,KAAK;AAAA,WAAI,UAAAW,KAAK,EAAI;AACrC,aAAOX,KAAK,CAACC,SAAN,CAAgBW,MAAhB,CAAuB,UAAAJ,QAAQ;AAAA,eAAIA,QAAQ,CAACG,KAAT,KAAmBA,KAAvB;AAAA,OAA/B,CAAP;AACD,KAFyB;AAAA,GALZ;AAQdE,EAAAA,UAAU,EAAE,oBAAAb,KAAK;AAAA,WAAIA,KAAK,CAACE,OAAV;AAAA;AARH,CAAhB;AAWA,IAAMY,OAAO,6CACVpB,eADU;AAAA,sEACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAASqB,YAAAA,MAAT,QAASA,MAAT,EAAiBC,SAAjB,QAAiBA,SAAjB;AAAA,6CACV,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC1B,cAAAA,eAAe,CAACW,YAAhB,CAA6BY,SAAS,CAACI,IAAV,CAAeC,KAA5C,EACGC,IADH,CAEI,UAAAC,GAAG,EAAI;AACLR,gBAAAA,MAAM,CAACjB,aAAD,EAAgByB,GAAG,CAACC,IAApB,CAAN;AACAN,gBAAAA,OAAO,CAACK,GAAD,CAAP;AACD,eALL,EAMI,UAAAE,GAAG,EAAI;AACLV,gBAAAA,MAAM,CAAChB,WAAD,EAAc0B,GAAG,CAACvB,OAAlB,CAAN;AACAiB,gBAAAA,MAAM,CAACM,GAAD,CAAN;AACD,eATL;AAWD,aAZM,CADU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADR;;AAAA;AAAA;AAAA;AAAA,gCAgBV9B,YAhBU,EAgBK,iBAAwB+B,OAAxB,EAAoC;AAAA,MAAjCX,MAAiC,SAAjCA,MAAiC;AAAA,MAAzBC,SAAyB,SAAzBA,SAAyB;AAClD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC1B,IAAAA,eAAe,CAACkC,WAAhB,CAA4BX,SAAS,CAACI,IAAV,CAAeC,KAA3C,EAAkDK,OAAlD,EACGJ,IADH,CAEI,UAAAC,GAAG,EAAI;AACLR,MAAAA,MAAM,CAAChB,WAAD,EAAc,UAAd,CAAN;AACAmB,MAAAA,OAAO,CAACK,GAAG,CAACC,IAAL,CAAP;AACD,KALL,EAMI,UAAAC,GAAG,EAAI;AACLV,MAAAA,MAAM,CAAChB,WAAD,EAAc0B,GAAG,CAACvB,OAAlB,CAAN;AACAiB,MAAAA,MAAM,CAACM,GAAD,CAAN;AACD,KATL;AAWD,GAZM,CAAP;AAaD,CA9BU,6BA+BV7B,aA/BU,EA+BM,iBAAgB8B,OAAhB,EAA4B;AAAA,MAAzBV,SAAyB,SAAzBA,SAAyB;AAC3C,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC1B,IAAAA,eAAe,CAACmC,YAAhB,CAA6BZ,SAAS,CAACI,IAAV,CAAeC,KAA5C,EAAmDK,OAAnD,EACGJ,IADH,CAEI,UAAAC,GAAG;AAAA,aAAIL,OAAO,CAACK,GAAD,CAAX;AAAA,KAFP,EAGI,UAAAE,GAAG;AAAA,aAAIN,MAAM,CAACM,GAAD,CAAV;AAAA,KAHP;AAKD,GANM,CAAP;AAOD,CAvCU,6BAwCV5B,eAxCU,EAwCQ,iBAAwBS,EAAxB,EAA+B;AAAA,MAA5BS,MAA4B,SAA5BA,MAA4B;AAAA,MAApBC,SAAoB,SAApBA,SAAoB;AAChD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC1B,IAAAA,eAAe,CAACoC,cAAhB,CAA+Bb,SAAS,CAACI,IAAV,CAAeC,KAA9C,EAAqDf,EAArD,EACGgB,IADH,CAEI,UAAAC,GAAG,EAAI;AACLR,MAAAA,MAAM,CAAChB,WAAD,EAAc,UAAd,CAAN;AACAmB,MAAAA,OAAO,CAACK,GAAD,CAAP;AACD,KALL,EAMI,UAAAE,GAAG;AAAA,aAAIN,MAAM,CAACM,GAAD,CAAV;AAAA,KANP;AAQD,GATM,CAAP;AAUD,CAnDU,YAAb;AAsDA,OAAO,IAAMK,SAAS,iDACnBhC,aADmB,EACH,UAACE,KAAD,EAAQC,SAAR,EAAsB;AACrCD,EAAAA,KAAK,CAACC,SAAN,GAAkBA,SAAlB;AACD,CAHmB,+BAInBF,WAJmB,EAIL,UAACC,KAAD,EAAQE,OAAR,EAAoB;AACjCF,EAAAA,KAAK,CAACE,OAAN,GAAgBA,OAAhB;AACD,CANmB,cAAf;AASP,eAAe;AACb6B,EAAAA,UAAU,EAAE,IADC;AAEb/B,EAAAA,KAAK,EAALA,KAFa;AAGbG,EAAAA,OAAO,EAAPA,OAHa;AAIbW,EAAAA,OAAO,EAAPA,OAJa;AAKbgB,EAAAA,SAAS,EAATA;AALa,CAAf","sourcesContent":["import questionService from \"@/api/question.service\";\nimport { \n  // Actions\n  FETCH_QUESTIONS,\n  ADD_QUESTION,\n  EDIT_QUESTION,\n  REMOVE_QUESTION,\n  // Mutations \n  SET_QUESTIONS,\n  SET_MESSAGE \n} from \"./question.constants\";\n\nconst state = {\n  questions: [],\n  message: \"\"\n};\n\nconst getters = {\n  getQuestions: state => state.questions,\n  getQuestionById: state => id => {\n    return state.questions.find(question => question._id === id)\n  },\n  getQuestionsByLevel: state => level => {\n    return state.questions.filter(question => question.level === level)\n  },\n  getMessage: state => state.message\n};\n\nconst actions = {\n  [FETCH_QUESTIONS]: async ({ commit, rootState }) => {\n    return new Promise((resolve, reject) => {\n      questionService.getQuestions(rootState.auth.token)\n        .then(\n          res => {\n            commit(SET_QUESTIONS, res.body);\n            resolve(res)\n          },\n          err => {\n            commit(SET_MESSAGE, err.message)\n            reject(err)\n          }\n        );\n    });\n  },\n  [ADD_QUESTION]: ({ commit, rootState }, payload) => {\n    return new Promise((resolve, reject) => {\n      questionService.addQuestion(rootState.auth.token, payload)\n        .then(\n          res => {\n            commit(SET_MESSAGE, \"sucesso!\");\n            resolve(res.body) \n          },\n          err => {\n            commit(SET_MESSAGE, err.message)\n            reject(err)\n          }\n        );\n    });\n  },\n  [EDIT_QUESTION]: ({ rootState }, payload) => {\n    return new Promise((resolve, reject) => {\n      questionService.editQuestion(rootState.auth.token, payload)\n        .then(\n          res => resolve(res),\n          err => reject(err)\n        );\n    });\n  },\n  [REMOVE_QUESTION]: ({ commit, rootState }, id) => {\n    return new Promise((resolve, reject) => {\n      questionService.removeQuestion(rootState.auth.token, id)\n        .then(\n          res => {\n            commit(SET_MESSAGE, \"sucesso!\");\n            resolve(res)\n          },\n          err => reject(err)\n        );\n    });\n  }\n};\n\nexport const mutations = {\n  [SET_QUESTIONS]: (state, questions) => {\n    state.questions = questions;\n  },\n  [SET_MESSAGE]: (state, message) => {\n    state.message = message;\n  }\n};\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n}"]}]}